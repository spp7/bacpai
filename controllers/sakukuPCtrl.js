const mongoose = require('mongoose')

const util = require('../helpers/util')
const User = require('../models/user')
const Topup = require('../models/topup')
const Transaction = require('../models/transaction')
/*
  createUser => register customer wallet
  userInquiry => show customer data and the amount of its balance.
  userUpdate => update customer data
  createTopup => add funds to user e-wallet. Through the instruction of the e-wallet issuer
    transaksi dulu baru create topup
  topupInquiry => show top up data
  transactionInquiry => get the transaction list of a e-wallet user until 31 days behind. The maximum total of transactions returned is 10
  generateOTP => generateOTP
  transferCompanyAccount => transfer from sub account to company account.
  transferCompanyAccountInquiry => inquiry transfer company account
*/

const createUser = (req, res) => {
  let newUser = {
    "CustomerName": req.body.CustomerName || "Poppy Sari",
    "DateOfBirth":  req.body.DateOfBirth || "1993-07-11",
    "PrimaryID":  req.body.PrimaryID || "081234567890",  //Unique ID per customer from merchant system (Email or Mobile number or Customer number
    "MobileNumber":  req.body.MobileNumber || "085813372792",
    "EmailAddress":  req.body.EmailAddress || "poppymighty@gmail.com",
    "CompanyCode":  req.body.CompanyCode || "80173",  //Merchant Company Code generated by ACB (Number)
    "CustomerNumber":  req.body.CustomerNumber || "1111111112",  //Unique number generated by merchant for balance topup using ACB virtual account system
    "IDNumber":  req.body.IDNumber || "1234567890123456" //KTP atau apa (16)
  }

  let user = new User(newUser)

  user.save( (err, nuser) => {
    if (err) res.send(err)
    else
      res.send({
        "PrimaryID": nuser.PrimaryID,
        "CompanyCode": nuser.CompanyCode
      })
  })
  // RETURN
  // {
  //   "PrimaryID": "081234567890",
  //   "CompanyCode": "80173"
  // }
}

const userInquiry = (req, res) => {
  if (typeof req.params.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.params.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})

  User.findOne(
    {
      'CompanyCode': req.params.CompanyCode,
      'PrimaryID': req.params.PrimaryID
    },
    (err, user) => {
      res.send(err? {err: err} : user)
    }
  )
  // RETURN
  // {
  //   "PrimaryID": "081234567890",
  //   "CustomerNumber": "10000",
  //   "CurrencyCode": "IDR",
  //   "Balance": "10000.00",
  //   "CustomerName": "John Doe",
  //   "DateOfBirth": "2016-02-01",
  //   "MobileNumber": "081234567890",
  //   "EmailAddress": "customer@domain.com",
  //   "IDNumber": "1234567890123456"
  // }

}

const userUpdate = (req, res) => {
  if (typeof req.body.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.body.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.body.IDNumber === 'undefined') res.send({err: "Kartu identitas harus diisi"})

  let updUser = {
    IDNumber : req.body.IDNumber
  }

  if (typeof req.body.DateOfBirth !== 'undefined') {
    if (util.checkDate(req.body.DateofBirth)) updUser.DateOfBirth = req.body.DateOfBirth
    else res.send({err: 'DateofBirth salah'})
  }
  if (typeof req.body.CustomerName !== 'undefined') updUser.CustomerName = req.body.CustomerName
  if (typeof req.body.MobileNumber !== 'undefined') updUser.MobileNumber = req.body.MobileNumber
  if (typeof req.body.EmailAddress !== 'undefined') updUser.EmailAddress = req.body.EmailAddress
  if (typeof req.body.WalletStatus !== 'undefined') updUser.WalletStatus = req.body.WalletStatus

  User.findOne({
    'CompanyCode': req.body.CompanyCode,
    'PrimaryID': req.body.PrimaryID,
    'IDNumber': req.body.IDNumber
  }, (err, user) => {
    if (err) res.send({err: 'User not found'+ err})
    else {
      for (let key in updUser) user[key] = updUser[key]
      user.save( (err, uuser) => {
        if (err) res.send({err:err})
        else
          res.send({
            "PrimaryID": uuser.PrimaryID,
            "CompanyCode": uuser.CompanyCode
          })
      })
    }
  })
  // RETURN
  // {
  //   "PrimaryID":"081234567890",
  //   "CompanyCode":"80173"
  // }
}


const createTopup = (req, res) => {
  // {
  //   "CompanyCode": "80173",
  //   "PrimaryID": "081234567890",
  //   "TransactionID": "TRX123456789012345", => unik
  //   "RequestDate": "2016-02-01T13:14:30.000+07:00",
  //   "Amount": "10000.00",
  //   "CurrencyCode": "IDR"
  // }

  if (typeof req.body.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  else if (typeof req.body.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  else if (typeof req.body.TransactionID === 'undefined') res.send({err: "TransactionID harus diisi"})
  else if (typeof req.body.Amount === 'undefined') res.send({err: "Amount harus diisi"})
  else if (`${req.body.Amount}`.length < 3 || `${req.body.Amount}`.substr(-3,1) !== '.') res.send({err: "Format amount salah"})
  else {
    let topupData = {
      "CompanyCode": req.body.CompanyCode,
      "PrimaryID": req.body.PrimaryID,
      "TransactionID": req.body.TransactionID,
      "RequestDate": new Date().toISOString(),
      "Amount": req.body.Amount,
      "CurrencyCode": "IDR"
    }

    let topup = new Topup(topupData)
    topup.save((err,ntopup) => {
      if (err) res.send(err)
      else
        Transaction.findOne(
          {
            TransactionID: ntopup.TransactionID
          },
          (err,trans) => {
            if (err) res.send({err: err})
            else
              res.send({
                "CompanyCode": ntopup.CompanyCode,
                "TransactionID": req.body.TransactionID,
                "BCAReferenceID": trans.BCAReferenceID,
                "TransactionDate": trans.TransactionDate
              })
          }
        )
    })
  }

  // RETURN
  // {
  //   "CompanyCode": "80173",
  //   "TransactionID": "TRX123456789012345",
  //   "BCAReferenceID": "11223344556677889900",
  //   "TransactionDate": "2016-02-01T13:14:30.000+07:00"
  // }
}

const topupInquiry = (req, res) => {
  if (typeof req.params.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.params.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.query.TransactionID === 'undefined') res.send({err: "TransactionID harus diisi"})
  if (typeof req.query.RequestDate === 'undefined') res.send({err: "RequestDate harus diisi"})
  else if (!util.checkDate(req.query.RequestDate)) res.send({err: 'RequestDate salah'})

  Topup.findOne({
    'CompanyCode' : req.params.CompanyCode,
    'PrimaryID' : req.params.PrimaryID,
    'TransactionID': req.query.TransactionID,
    'RequestDate': new RegExp('^('+req.query.RequestDate+')\w*','gi')
  }, (err, topup) => {
    if (err) res.send({err:err})
    else
      Transaction.findOne(
        {
          TransactionID: topup.TransactionID
        },
        (err,trans) => {
          if (err) res.send({err: err})
          else
            res.send({
              "CompanyCode": topup.CompanyCode,
              "TransactionID": topup.TransactionID,
              "BCAReferenceID": trans.BCAReferenceID,
              "TransactionDate": trans.TransactionDate
            })
        }
      )
  })
  // RETURN
  // {
  //   "CompanyCode": "80173",
  //   "TransactionID": "TRX123456789012345",
  //   "BCAReferenceID": "201602010915111234500000009877",
  //   "TransactionDate": "2016-02-01T13:14:30.000+07:00"
  // }
}

const transactionInquiry = (req, res) => {
  if (typeof req.params.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.params.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.query.StartDate === 'undefined') res.send({err: "StartDate harus diisi"})
  else if (!util.checkDate(req.query.StartDate)) res.send({err: 'StartDate salah'})
  if (typeof req.query.EndDate === 'undefined') res.send({err: "EndDate harus diisi"})
  else if (!util.checkDate(req.query.EndDate)) res.send({err: 'EndDate salah'})

  //LastAccountStatementID	String(18)	No	Last AccountStatement ID
  // provided to get the older transaction history than ‘this’ Transaction ID (every request will display 10 transaction).
  // If you do request for the first time, ignore this field
  let findTrans = {
    "CompanyCode": req.params.CompanyCode,
    "PrimaryID": req.params.PrimaryID
  }

  if (typeof req.query.LastAccountStatementID !== 'undefined')
    findTrans.AccountStatement = { $gt: parseInt(req.query.lastAccountStatementID), $lt: parseInt(req.query.lastAccountStatementID)+10 }


  Transaction.find(findTrans)
  .limit(10)
  .sort({AccountStatementID: -1})
  .exec((err, transs) => {
    if (err) res.send({err:err})
    else {
      let ftrans = {
        "CompanyCode": transs[0].CompanyCode,
        "PrimaryID": transs[0].PrimaryID,
        "TotalTransactions": transs.length,
        "LastAccountStatementID": transs[transs.length-1].LastAccountStatementID,
        "TransactionDetails": []
      }

      transs.forEach(trans => {
        ftrans.TransactionDetails.push({
          "TransactionID": trans.TransactionID,
          "AccountStatementID": trans.AccountStatementID,
          "TransactionDate": trans.TransactionDate,
          "TransactionType": trans.TransactionType,
          "Amount": trans.Amount,
          "CurrencyCode": trans.CurrenyCode,
          "Description": trans.Description,
          "CurrentBalance": trans.CurrentBalance
        })
      })
      res.send(ftrans)
    }
  });


  // {
  //   "CompanyCode" : "80173",
  //   "PrimaryID" : "081234567890",
  //   "TotalTransactions": "2",
  //   "LastAccountStatementID" : "123455",

  //   "TransactionDetails":[{
  //     "TransactionID" : "TR12345",
  //     "AccountStatementID" : "123457",
  //     "TransactionDate" : "2016-02-01T13:13:13.000+07:00",
  //     "TransactionType" : "Payment",
  //     "Amount" : "5000.50",
  //     "CurrencyCode" : "IDR",
  //     "Description" : "Berita 1",
  //     "CurrentBalance" : "1000000.00"
  //     },
  //     {
  //     "TransactionID":"TR12346",
  //     "AccountStatementID" : "123456",
  //     "TransactionDate":"2016-02-01T13:13:14.000+07:00",
  //     "TransactionType":"Payment",
  //     "Amount":"7000.50",
  //     "CurrencyCode":"IDR",
  //     "Description":"Berita 2",
  //     "CurrentBalance":"994999.50"
  //     }
  //   ]
  // }
}

const generateOTP = (req, res) => {
// {
//     "CompanyCode": "80173",
//     "CustomerNumber": "8220000835",
//     "Amount": "100000.00"
// }
  if (typeof req.body.TransactionType === 'undefined') res.send({err: "TransactionType harus diisi"})
  else if (req.body.TransactionType !== 'Cashout' && req.body.TransactionType !== 'Payment') res.send({err: "TransactionType salah"})
  else if (typeof req.body.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  else if (typeof req.body.Amount === 'undefined') res.send({err: "Amount harus diisi"})
  else if (typeof req.body.CustomerNumber === 'undefined') res.send({err: "CustomerNumber harus diisi"})
  else {
    let otpData = {
      CompanyCode : req.body.CompanyCode,
      Amount : req.body.Amount,
      CustomerNumber : req.body.CustomerNumber
    }

    Transaction.find({
        "TransactionType": req.body.TransactionType,
        "CompanyCode": req.body.CompanyCode,
        "CustomerNumber": req.body.CustomerNumber,
        "Amount": req.body.Amount
      },
      (err, trans) => {
        if (err) res.send({err: err})
        else {
          let currDate = new Date()
          currDate.setHours(currDate.getHours() + 1)
          res.send({
            "CompanyCode": trans.CompanyCode,
            "CustomerNumber": trans.CustomerNumber,
            "OTPCode": '123455', //ceritanya di generate
            "ExpiredDate": currDate,
            "Amount": "100000.00"
          })
        }
      }
    )
  }

  // {
  //   "CompanyCode": "80173",
  //   "CustomerNumber": "8220000835",
  //   "OTPCode": "224136",
  //   "ExpiredDate": "2016-11-21 11:17:12",
  //   "Amount": "100000.00"
  // }
}

const transferCompanyAccount = (req, res) => {
  //new Date().toISOString()
  if (typeof req.body.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.body.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.body.TransactionID === 'undefined') res.send({err: "TransactionID harus diisi"})
  if (typeof req.body.Amount === 'undefined') res.send({err: "Amount harus diisi"})
  if (`${req.body.Amount}`.length < 3 || `${req.body.Amount}`.substr(-3,1) !== '.') res.send({err: "Format amount salah"})

  let transferData = {
    "TransactionDate" : new Date().toISOString(),
    "TransactionType" : 'Payment',
    "CompanyCode": req.body.CompanyCode,
    "PrimaryID": req.body.PrimaryID,
    "TransactionID": req.body.TransactionID,
    "Amount": req.body.Amount,
    "CurrencyCode": "IDR",
  }
  let transaction = new Transaction(transferData)

  transaction.save((err, ntrans) => {
    if (err) res.send({err: err})
    else {
      res.send({
        "CompanyCode": ntrans.CompanyCode,
        "TransactionID": ntrans.TransactionID,
        "BCAReferenceID": ntrans.BCAReferenceID,
        "TransactionDate": ntrans.TransactionDate
      })
    }
  })
  // console.log(transferData)
  // {
  //   "CompanyCode": "80173",
  //   "TransactionID": "TRX123456789012345",
  //   "BCAReferenceID": "11223344556677889900",
  //   "TransactionDate": "2016-02-01T13:14:30.000+07:00"
  // }
}

const transferCompanyAccountInquiry = (req, res) => {
  //GET /ewallet/transfers/80173/081234567890?TransactionID=TRX123456789012345&RequestDate=2016-02-01 HTTP/1.1

  if (typeof req.params.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.params.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.query.TransactionID === 'undefined') res.send({err: "TransactionID harus diisi"})
  if (typeof req.query.RequestDate === 'undefined') res.send({err: "RequestDate harus diisi"})
  else if (!util.checkDate(req.query.RequestDate)) res.send({err: 'RequestDate salah'})
  else
    Transaction.findOne({
        "TransactionType": 'Payment',
        "CompanyCode": req.params.CompanyCode,
        "PrimaryID": req.params.PrimaryID,
        "TransactionDate": new RegExp('^('+req.query.RequestDate+')\w*','gi'),
        "TransactionID": req.query.TransactionID
      },
      (err, trans) => {
        if (err) res.send({err: err})
        else
          res.send({
            "CompanyCode": trans.CompanyCode,
            "TransactionID": trans.TransactionID,
            "BCAReferenceID": trans.BCAReferenceID,
            "TransactionDate": trans.TransactionDate
          })
      }
    )

//   {
//     "CompanyCode": "80173",
//     "TransactionID": "TRX123456789012345",
//     "BCAReferenceID": "201602010915111234500000009877",
//     "TransactionDate": "2016-02-01T13:14:30.000+07:00"
//    }
}

module.exports = {
  createUser,
  userInquiry,
  userUpdate,
  createTopup,
  topupInquiry,
  transactionInquiry,
  generateOTP,
  transferCompanyAccount,
  transferCompanyAccountInquiry
}