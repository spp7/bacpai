require('dotenv').config()

const axios = require('axios')

const util = require('../helpers/util')

/*
  createUser => register customer wallet
  userInquiry => show customer data and the amount of its balance.
  userUpdate => update customer data
  createTopup => add funds to user e-wallet. Through the instruction of the e-wallet issuer
  topupInquiry => show top up data
  transactionInquiry => get the transaction list of a e-wallet user until 31 days behind. The maximum total of transactions returned is 10
  generateOTP => generateOTP
  transferCompanyAccount => transfer from sub account to company account.
  transferCompanyAccountInquiry => inquiry transfer company account
*/

const createUser = (req, res) => {

  if (typeof req.body.CustomerName === 'undefined') res.send({err: "CustomerName harus diisi"})
  if (typeof req.body.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.body.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.body.DateOfBirth === 'undefined') res.send({err: "DateOfBirth harus diisi"})
  else if (!util.checkDate(req.body.DateOfBirth)) res.send({err: 'DateOfBirth salah'})
  if (typeof req.body.MobileNumber === 'undefined') res.send({err: "MobileNumber harus diisi"})
  if (typeof req.body.CustomerNumber === 'undefined') res.send({err: "CustomerNumber harus diisi"})
  if (typeof req.body.IDNumber === 'undefined') res.send({err: "IDNumber harus diisi"})

  let newUser = {
    "CustomerName": req.body.CustomerName || "Poppy Sari",
    "DateOfBirth":  req.body.DateOfBirth || "1993-07-11",
    "PrimaryID":  req.body.PrimaryID || "085813372792",  //Unique ID per customer from merchant system (Email or Mobile number or Customer number
    "MobileNumber":  req.body.MobileNumber || "085813372792",
    "EmailAddress":  req.body.EmailAddress || "poppymighty@gmail.com",
    "CompanyCode":  req.body.CompanyCode || "80173",  //Merchant Company Code generated by ACB (Number)
    "CustomerNumber":  req.body.CustomerNumber || "1111111112",  //Unique number generated by merchant for balance topup using ACB virtual account system
    "IDNumber":  req.body.IDNumber || "1234567890123456" //KTP atau apa (16)
  }

  if (typeof req.body.EmailAddress === 'undefined') newUser.EmailAddress = req.body.EmailAddress

  axios.post(`${process.env.API_URL}/ewallet/customers`, newUser)
  .then((err,result) => {
    res.send(err? {err: err} : result)
  })
}

const userInquiry = (req, res) => {
  if (typeof req.params.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.params.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})

  axios.get(`${process.env.API_URL}/ewallet/customers/${req.params.CompanyCode}/${req.params.PrimaryID}`)
  .then((err,result) => {
    res.send(err? {err: err} : result)
  })
}

const userUpdate = (req, res) => {
  if (typeof req.body.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.body.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.body.IDNumber === 'undefined') res.send({err: "Kartu identitas harus diisi"})

  let updUser = {
    IDNumber : req.body.IDNumber
  }

  if (typeof req.body.DateOfBirth !== 'undefined') {
    if (util.checkDate(req.body.DateofBirth)) updUser.DateOfBirth = req.body.DateOfBirth
    else res.send({err: 'DateofBirth salah'})
  }
  if (typeof req.body.CustomerName !== 'undefined') updUser.CustomerName = req.body.CustomerName
  if (typeof req.body.MobileNumber !== 'undefined') updUser.MobileNumber = req.body.MobileNumber
  if (typeof req.body.EmailAddress !== 'undefined') updUser.EmailAddress = req.body.EmailAddress
  if (typeof req.body.WalletStatus !== 'undefined') updUser.WalletStatus = req.body.WalletStatus

  axios.put(`${process.env.API_URL}/ewallet/customers/${req.body.CompanyCode}/${req.body.PrimaryID}`, updUser)
  .then((err,result) => {
    res.send(err? {err: err} : result)
  })
}


const createTopup = (req, res) => {
  if (typeof req.body.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.body.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.body.TransactionID === 'undefined') res.send({err: "TransactionID harus diisi"})
  if (typeof req.body.Amount === 'undefined') res.send({err: "Amount harus diisi"})
  if (`${req.body.Amount}`.length < 3 || `${req.body.Amount}`.substr(-3,1) !== '.') res.send({err: "Format amount salah"})

  let topupData = {
    "CompanyCode": req.body.CompanyCode,
    "PrimaryID": req.body.PrimaryID,
    "TransactionID": req.body.TransactionID || new Date().toISOString(),
    "RequestDate": new Date().toISOString(),
    "Amount": req.body.Amount,
    "CurrencyCode": "IDR"
  }

  axios.post(`${process.env.API_URL}/ewallet/topup`, topupData)
  .then((err,result) => {
    res.send(err? {err: err} : result)
  })
}

const topupInquiry = (req, res) => {
  if (typeof req.params.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.params.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.query.TransactionID === 'undefined') res.send({err: "TransactionID harus diisi"})
  if (typeof req.query.RequestDate === 'undefined') res.send({err: "RequestDate harus diisi"})
  else if (!util.checkDate(req.query.RequestDate)) res.send({err: 'RequestDate salah'})

  axios.get(`${process.env.API_URL}/ewallet/topup/${req.params.CompanyCode}/${req.params.PrimaryID}?TransactionID=${req.query.TransactionID}&RequestDate=${req.query.RequestDate}`)
  .then((err,result) => {
    res.send(err? {err: err} : result)
  })
}

const transactionInquiry = (req, res) => {
  if (typeof req.params.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.params.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.query.StartDate === 'undefined') res.send({err: "StartDate harus diisi"})
  else if (!util.checkDate(req.query.StartDate)) res.send({err: 'StartDate salah'})
  if (typeof req.query.EndDate === 'undefined') res.send({err: "EndDate harus diisi"})
  else if (!util.checkDate(req.query.EndDate)) res.send({err: 'EndDate salah'})

  //LastAccountStatementID	String(18)	No	Last AccountStatement ID
  // provided to get the older transaction history than ‘this’ Transaction ID (every request will display 10 transaction).
  // If you do request for the first time, ignore this field

  var lastAccountStatementID = req.query.LastAccountStatementID || ''
  axios.get(`${process.env.API_URL}/ewallet/transactions/${req.params.CompanyCode}/${req.params.PrimaryID}?StartDate=${req.query.StartDate}&EndDate=${req.query.EndDate}&LastAccountStatementID=${lastAccountStatementID}`)
  .then((err,result) => {
    res.send(err? {err: err} : result)
  })
}

const generateOTP = (req, res) => {
  if (typeof req.body.TransactionType === 'undefined') res.send({err: "TransactionType harus diisi"})
  else if (req.body.TransactionType !== 'Cashout' && req.body.TransactionType !== 'Payment') res.send({err: "TransactionType salah"})
  else if (typeof req.body.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  else if (typeof req.body.Amount === 'undefined') res.send({err: "Amount harus diisi"})
  else if (typeof req.body.CustomerNumber === 'undefined') res.send({err: "CustomerNumber harus diisi"})
  else {
    let otpData = {
      CompanyCode : req.body.CompanyCode,
      Amount : req.body.Amount,
      CustomerNumber : req.body.CustomerNumber
    }

    axios.post(`${process.env.API_URL}/ewallet/generate/${req.body.TransactionType}`, otpData)
    .then((err,result) => {
      res.send(err? {err: err} : result)
    })
  }

}

const transferCompanyAccount = (req, res) => {
  if (typeof req.body.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.body.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.body.TransactionID === 'undefined') res.send({err: "TransactionID harus diisi"})
  if (typeof req.body.Amount === 'undefined') res.send({err: "Amount harus diisi"})
  if (`${req.body.Amount}`.length < 3 || `${req.body.Amount}`.substr(-3,1) !== '.') res.send({err: "Format amount salah"})

  let transferData = {
    "RequestDate" : new Date().toISOString(),
    "CompanyCode": req.body.CompanyCode,
    "PrimaryID": req.body.PrimaryID,
    "TransactionID": req.body.TransactionID,
    "Amount": req.body.Amount,
    "CurrencyCode": "IDR"
  }


  axios.post(`${process.env.API_URL}/ewallet/transfers`, transferData)
  .then((err,result) => {
    res.send(err? {err: err} : result)
  })
}

const transferCompanyAccountInquiry = (req, res) => {
  //GET /ewallet/transfers/80173/081234567890?TransactionID=TRX123456789012345&RequestDate=2016-02-01 HTTP/1.1

  if (typeof req.params.CompanyCode === 'undefined') res.send({err: "Company Code harus diisi"})
  if (typeof req.params.PrimaryID === 'undefined') res.send({err: "Primary ID harus diisi"})
  if (typeof req.query.TransactionID === 'undefined') res.send({err: "TransactionID harus diisi"})
  if (typeof req.query.RequestDate === 'undefined') res.send({err: "RequestDate harus diisi"})
  else if (!util.checkDate(req.query.RequestDate)) res.send({err: 'RequestDate salah'})

  axios.get(`${process.env.API_URL}/ewallet/transfer/${req.params.CompanyCode}/${req.params.PrimaryID}?TransactionID=${req.query.TransactionID}&RequestDate=${req.query.RequestDate}`)
  .then((err,result) => {
    res.send(err? {err: err} : result)
  })
}

module.exports = {
  createUser,
  userInquiry,
  userUpdate,
  createTopup,
  topupInquiry,
  transactionInquiry,
  generateOTP,
  transferCompanyAccount,
  transferCompanyAccountInquiry
}